class Solution {
public:
    int climbStairs(int n) {
        // 爬楼梯问题，这里确定了可以进行的步数为1或2
        // 根据规律发现，第1层有1种方法，第2层有2种方法，第3层有3种方法，第4层有5种方法，
        // 可以发现，后一层的爬楼梯方法的前两层相加，发现像一个斐波那契数列
        // 这里dp[i]表示i为层数，dp[i]为方法数
        if(n <= 1)
        {
            return n;
        }
        int dp[3];
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i <= n; i ++)
        {
            int sum = dp[1] + dp[2];
            dp[1] = dp[2];
            dp[2] = sum;
        }
        return dp[2];
    }
};

// 完全体的方法，可以应对更多情况，比如爬楼梯的方法为1-m,只需要设置背包内的值即可
class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1, 0);
        // 这里初始化dp[0]为1而不是0，是为了后续递加过程使用
        dp[0] = 1;
        for(int i = 1; i <= n; i ++)    //这里遍历整个背包（楼层）
        {
            for(int j = 1; j <= 2; j ++)    //这里遍历背包里的东西（爬楼的方式）
            {
                // 这里就相当于把，所有可能得结果都递加了一遍
                if(i-j >= 0)
                {
                    dp[i] += dp[i-j];
                }
            }
        }
        return dp[n];
    }
};
