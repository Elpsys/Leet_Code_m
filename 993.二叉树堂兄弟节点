/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    // x 的信息
    int x;
    TreeNode* x_parent;
    int x_depth;
    bool x_found = false;

    // y 的信息
    int y;
    TreeNode* y_parent;
    int y_depth;
    bool y_found = false;


public:
    void dfs(TreeNode* node, int depth, TreeNode* parent)
    {
        if(!node)
        {
            return;
        }

        if(node->val == x)
        {
            // 集体赋值的函数tie
            tie(x_parent, x_depth, x_found) = tuple{parent, depth, true};
        }
        else if(node->val == y)
        {
            tie(y_parent, y_depth, y_found) = tuple{parent, depth, true};
        }

        if(x_found && y_found)
        {
            return;
        }
        // 深度优先
        dfs(node->left, depth+1, node);

        if(x_found && y_found)
        {
            return;
        }

        dfs(node->right, depth+1, node);

    }


    bool isCousins(TreeNode* root, int x, int y) {
        this->x = x;
        this->y = y;
        dfs(root, 0, nullptr);
        return x_depth == y_depth && x_parent != y_parent;
    }
};
