/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 这里将一个大问题划分为一个一个小问题，通过每次递归处理这些小问题
    // 目标：给定一个target，确定根节点到叶子节点间是否存在一条路径上的和等于target
    // 递归划分，相当于每次递归解决该节点值是否等于target == root->val
    // 如果不是，每次传递的target值发生变化，变为target-root->val，再计算下一次迭代值
    // 只要有一条路径成功即为成功。
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(root == nullptr)
        {
            return false;
        }
        // 只有再叶子节点时才计算
        if(root->left == nullptr && root->right == nullptr)
        {
            return targetSum == root->val;
        }
        return hasPathSum(root->left, targetSum-root->val) || hasPathSum(root->right,targetSum-root->val);
    }
};
