// 这里其实就是二分查找的应用，复杂度为log n
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int l = 0, r = nums.size()-1;
        int mid = 0;
        while(l <= r)
        {
            mid = l + (r - l) / 2;
            if(target > nums[mid])
            {
                l = mid + 1;
            }
            else if(target < nums[mid])
            {
                r = mid - 1;
            }
            else
            {
                return mid;
            }
        }
        // 这里为什么返回的左值，因为如果所查找值不在数组中，我们需要将他插入对应顺序存储的位置，
        // 根据二分查找的原理，可以保证左值一直是比目标值小的，当最后退出循环时，左值所在位置，刚好为应该目标值应该插入的位置
        return l;

    }
};
