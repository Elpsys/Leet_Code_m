class Solution {
public:
// 第一种方法，时间复杂度O(N),空间复杂度O(N)
// 利用哈希表，存储值和索引，通过遍历整个数组，判断是否存在满足条件的键值即可
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        unordered_map<int, int> mp;
        for(int i = 0; i < nums.size(); i ++)
        {
            if(mp.find(nums[i]) != mp.end())
            {
                cout << nums[i] << endl;
                if(abs(mp[nums[i]] - i) <= k)
                {
                    return true;
                }
            }
            mp[nums[i]] = i;

        }
        return false;
    }
// 第二种方法利用滑动窗口，确定每次滑动窗口的大小，只存储滑动窗口中的值
// 如果窗口中的元素有重复，说明满足题目条件
// 时间复杂度O(N),，空间复杂度O(k)
    bool slide_window(vector<int>& nums, int k)
    {
        unordered_set<int> s;
        int n = nums.size();
        for(int i = 0; i < n; i ++)
        {
            if(i > k)
            {
                s.erase(nums[i-k-1]);
            }
            if(s.count(nums[i]))
            {
                return true;
            }
            s.emplace(nums[i]);
        }
        return false;
    }
};
