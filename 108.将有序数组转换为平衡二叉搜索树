/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return helper(nums, 0, nums.size()-1);
    }

    TreeNode* helper(vector<int>& nums, int l, int r)
    {
        if(l>r)
        {
            return nullptr;
        }
        // 以下的操作都以升序排列的数为基础***
        // 当树中元素为奇数时，正好取中间元素作为新平衡搜索树的根
        // 当树中元素为偶数时，取左侧元素作为平衡搜索树的根
        int mid = (l + r)/2;

        TreeNode* root = new TreeNode(nums[mid]);
        // 这里按两侧进行递归，根左边及根右边
        // 将两边数按搜索树的逻辑，左<根<右
        root->left = helper(nums, l, mid-1);
        root->right = helper(nums, mid+1, r);
        return root;
    }
};
